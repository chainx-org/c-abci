/*********************************************************************************************/
/*                   dlist.h Created by xuli on 2017/08/26                                   */
/*                  本文件实现循环双向链表的增，删，查等操作                                 */
/*********************************************************************************************/
#ifndef __DLIST_H__
#define __DLIST_H__

#include <string.h>
#include <stdlib.h>

/* 删除一个节点时调用的回调函数，用于删除节点中的数据 */
typedef void (*FreeFunc)(void *);

/* 链表节点的结构体申明 */
typedef struct DNode{
	struct DNode *next; /* 指向下一个节点 */
	struct DNode *prev; /* 指向上一个节点 */
	void *data;			/* 节点中保存的数据 */
}DNode;

/* 链表结构体的申明 */
struct dlist{
	size_t size;	/* 链表中节点个数 */
	DNode *head;	/* 链表的头节点   */
	DNode *tail;	/* 链表的尾节点   */
	DNode *curr;	/* 链表的当前节点 */
};


/************************************************************************************************
 * 初始化一个链表结构体
 * @dlist:待初始化的链表结构体
 * @return:成功返回0， 失败返回-1
 ************************************************************************************************/
int create_dlist(struct dlist *dlist);


/************************************************************************************************
 * 往链表尾中插入数据
 * @dlist:待插入链表的结构体
 * @data:待插入的数据
 * @size:待插入数据的字节数
 * @return:成功返回0， 失败返回-1
 ************************************************************************************************/
int insert_tail(struct dlist *dlist, void *data, size_t size);


/************************************************************************************************
 * 往链表头中插入数据
 * @dlist:待插入链表的结构体
 * @data:待插入的数据
 * @size:待插入数据的字节数
 * @return:成功返回0， 失败返回-1
 ************************************************************************************************/
int insert_head(struct dlist *dlist, void *data, size_t size);


/************************************************************************************************
 * 在链表中查找数据
 * @dlist:待查找的数据的链表
 * @data:待查找的数据
 * @size:待查找数据的字节数
 * @return:成功返回0， 失败返回-1
 ************************************************************************************************/
int search_dlist(struct dlist *dlist, void *data, size_t size);


/************************************************************************************************
 * 在链表中删除一个指定的数据节点
 * @dlist:待删除数据的链表
 * @data:待删除的数据
 * @size:待删除数据的长度
 * @func:回调函数，删除指定数据节点时释放数据的空间，可以为NULL
 * @return:成功返回0， 失败返回-1
 ************************************************************************************************/
int delete_dlist(struct dlist *dlist, void *data, size_t size, FreeFunc func);


/************************************************************************************************
 * 删除链表中最后一个节点
 * @dlist:待删除节点的链表
 * @func:回调函数，删除节点时释放数据的空间，可以为NULL
 * @return:成功返回0， 失败返回-1
 ************************************************************************************************/
int delete_tail(struct dlist *dlist, FreeFunc func);


/************************************************************************************************
 * 删除链表中第一个节点
 * @dlist:待删除节点的链表
 * @func:回调函数，删除节点时释放数据的空间，可以为NULL
 * @return:成功返回0， 失败返回-1
 ************************************************************************************************/
int delete_head(struct dlist *dlist, FreeFunc func);


/************************************************************************************************
 * 销毁整条链
 * @dlist:待销毁的链
 * @func:回调函数，删除节点时释放数据的空间，每个节点都会调用一次，可以为NULL
 * @return:返回空值
 ************************************************************************************************/
void destroy_dlist(struct dlist *dlist, FreeFunc func);

#endif
